{"version":3,"sources":["postmortem/core.cljc"],"mappings":"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","names":["postmortem.core/session?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","postmortem.protocols/ISession","var_args","G__47913","postmortem.core/make-unsafe-session","js/Error","postmortem.core.make_unsafe_session","cljs.core/identity","xform","postmortem.session/->ThreadUnsafeSession","G__47934","postmortem.core/make-session","postmortem.core.make_session","postmortem.core/void-session","session","postmortem.session/void-session","postmortem.core/*current-session*","cljs.core.atom","cljs.core/deref","postmortem.core/current-session","postmortem.core/set-current-session!","cljs.core/reset!","G__47962","postmortem.core/completed?","key","postmortem.core.completed_QMARK_","postmortem.protocols/-completed?","G__47973","postmortem.core/logs*","postmortem.protocols/-complete!","postmortem.protocols/-logs","keys","G__47979","postmortem.core/log-for","postmortem.core.log_for","cljs.core.get","postmortem.core.logs_STAR_","postmortem.core/last-item","entry","G__47985","cljs.core/rseq","cljs.core/first","G__47991","postmortem.core/last-log-for","postmortem.core.last_log_for","G__48007","postmortem.core/logs-for","postmortem.core.logs_for","cljs.core/coll?","cljs.core/set","G__48021","postmortem.core/logs","postmortem.core.logs","G__48029","postmortem.core/keys","postmortem.core.keys","postmortem.protocols/-keys","G__48041","postmortem.core/stats","postmortem.core.stats","cljs.core.into","cljs.core.map","p__48045","vec__48046","cljs.core.nth","k","xs","cljs.core/count","G__48050","postmortem.core/frequencies","G__48052","postmortem.core/reset-key!","postmortem.core.reset_key_BANG_","postmortem.protocols/-reset!","G__48063","postmortem.core/reset-keys!","postmortem.core.reset_keys_BANG_","G__48075","postmortem.core/reset!","postmortem.core.reset_BANG_","G__48085","postmortem.core/spy>","postmortem.core.spy_GT_","postmortem.protocols/-add-item!","G__48089","postmortem.core/spy>>","postmortem.core.spy_GT__GT_","G__48099","postmortem.core/make-logger","postmortem.core.make_logger","sess","val","G__48103","postmortem.core/make-multi-logger","postmortem.core.make_multi_logger"],"sourcesContent":["(ns postmortem.core\n  (:refer-clojure :exclude [frequencies keys reset!])\n  (:require [clojure.core :as c]\n            #?(:clj [net.cgrand.macrovich :as macros])\n            [postmortem.protocols :as proto]\n            [postmortem.session :as session])\n  #?(:cljs\n     (:require-macros [net.cgrand.macrovich :as macros]\n                      [postmortem.core :refer [locals dump]])))\n\n(defn session?\n  \"Returns true if x is a session.\"\n  [x]\n  (satisfies? proto/ISession x))\n\n(defn make-unsafe-session\n  \"Creates and returns a new thread-unsafe session.\n  Updates to a thread-unsafe session won't be synchronized among mulithreads.\n  If all updates to a session need to be synchronized, use make-session instead.\n  In ClojureScript, make-unsafe-session is exactly the same as make-session.\"\n  ([] (make-unsafe-session identity))\n  ([xform]\n   (session/->ThreadUnsafeSession xform {})))\n\n(defn make-session\n  \"Creates and returns a new session.\n  Sessions created by this function are thread-safe and so all updates to them\n  will be synchronized. Only if it is guaranteed that no more than one updates\n  never happen simultaneously, make-unsafe-session can be used instead for better\n  performance.\n  In ClojureScript, make-session is exactly the same as make-unsafe-session.\"\n  ([] (make-session identity))\n  ([xform]\n   #?(:clj (session/synchronized (make-unsafe-session xform))\n      :cljs (make-unsafe-session xform))))\n\n(def\n  ^{:arglists '([])\n    :doc \"Returns a void session, which logs nothing and never triggers a call\n  to transducer. It's useful to disable logging entirely.\"}\n  void-session\n  (let [session (session/void-session)]\n    (fn [] session)))\n\n(def ^:dynamic *current-session*\n  \"Dynamic var bound to the current session. Don't use this directly, call\n  (current-session) instead.\"\n  (atom (make-session)))\n\n(defn current-session\n  \"Returns the current session.\"\n  []\n  @*current-session*)\n\n(defn set-current-session!\n  \"Sets the current session to the specified one.\"\n  [session]\n  (c/reset! *current-session* session)\n  nil)\n\n(macros/deftime\n\n  (defmacro with-session\n    \"Dynamically binds the current session to the specified one within the body\n  of this form.\"\n    [session & body]\n    `(binding [*current-session* (atom ~session)]\n       ~@body))\n\n  )\n\n(defn completed?\n  \"Returns true if the log entry for the specified key has been completed.\n  If session is omitted, the log entry in the current session will be checked.\"\n  ([key] (completed? (current-session) key))\n  ([session key]\n   (proto/-completed? session key)))\n\n(defn- logs*\n  ([session]\n   (proto/-complete! session)\n   (proto/-logs session))\n  ([session keys]\n   (proto/-complete! session keys)\n   (proto/-logs session keys)))\n\n(defn log-for\n  \"Completes log entry for the specified key and returns a vector of logged\n  items in the entry.\n  If session is omitted, the log will be pulled from the current session.\"\n  ([key] (log-for (current-session) key))\n  ([session key]\n   (assert (session? session) \"Invalid session specified\")\n   (get (logs* session #{key}) key)))\n\n(defn- last-item [entry]\n  (some->> entry rseq first))\n\n(defn last-log-for\n  \"Completes log entry for the specified key and returns the last item in\n  the entry.\n  If session is omitted, the log will be pulled from the current session.\"\n  ([key] (last-log-for (current-session) key))\n  ([session key]\n   (last-item (log-for session key))))\n\n(defn logs-for\n  \"Completes log entries for the specified keys and returns a map of key to\n  vector of logged items.\n  If session is omitted, the logs will be pulled from the current session.\"\n  ([keys] (logs-for (current-session) keys))\n  ([session keys]\n   (assert (session? session) \"Invalid session specified\")\n   (assert (coll? keys) \"keys must be a collection\")\n   (logs* session (set keys))))\n\n(defn logs\n  \"Completes all log entries and returns a map of key to vector of logged items.\n  If session is omitted, the logs will be pulled from the current session.\"\n  ([] (logs (current-session)))\n  ([session]\n   (assert (session? session) \"Invalid session specified\")\n   (logs* session)))\n\n(defn keys\n  \"Returns all the log entry keys that the session contains.\n  If session is ommited, the keys will be pulled from the current session.\"\n  ([] (keys (current-session)))\n  ([session]\n   (assert (session? session) \"Invalid session specified\")\n   (set (proto/-keys session))))\n\n(defn stats\n  \"Returns a stats map, which is a map of log entry key to a number\n  that indicates how many log items have been logged for the log entry.\n  If session is omitted, stats for the current session will be\n  returned.\"\n  ([] (stats (current-session)))\n  ([session]\n   (assert (session? session) \"Invalid session specified\")\n   (->> (logs* session)\n        (into {} (map (fn [[k xs]] [k (count xs)]))))))\n\n(defn frequencies\n  \"Alias for `stats`. See the docstring for `stats` for details.\"\n  ([] (stats (current-session)))\n  ([session] (stats session)))\n\n(defn reset-key!\n  \"Resets log entry for the specified key.\n  If session is omitted, the entries in the current session will be reset.\"\n  ([key] (reset-key! (current-session) key))\n  ([session key]\n   (assert (session? session) \"Invalid session specified\")\n   (proto/-reset! session #{key})\n   nil))\n\n(defn reset-keys!\n  \"Resets log entries for the specified keys.\n  If session is omitted, the entries in the current session will be reset.\"\n  ([keys] (reset-keys! (current-session) keys))\n  ([session keys]\n   (assert (session? session) \"Invalid session specified\")\n   (assert (coll? keys) \"keys must be a collection\")\n   (proto/-reset! session (set keys))\n   nil))\n\n(defn reset!\n  \"Resets all the log entries.\n  If session is omitted, the entries in the current session will be reset.\"\n  ([] (reset! (current-session)))\n  ([session]\n   (assert (session? session) \"Invalid session specified\")\n   (proto/-reset! session)\n   nil))\n\n(defn spy>\n  \"Saves a value to the log entry corresponding to the specified key and returns\n  the value as-is.\n  If a transducer xform is specified, it will be applied when adding\n  the value to the log entry. Defaults to clojure.core/identity.\n  If session is specified, the value will be added to the log entry in that\n  session. Otherwise, the value will be added to the log entry in the current\n  session.\n  spy> is intended to be used in combination with thread-first macros.\n  In thread-last contexts, use spy>> instead.\"\n  ([x key] (spy> x key identity))\n  ([x key xform] (spy> x (current-session) key xform))\n  ([x session key xform]\n   (proto/-add-item! session key xform x)\n   x))\n\n(defn spy>>\n  \"A version of spy> intended to be used in combination with thread-last macros.\n  See the docstring of spy> for more details.\"\n  ([key x] (spy>> key identity x))\n  ([key xform x] (spy>> (current-session) key xform x))\n  ([session key xform x] (spy> x session key xform)))\n\n(macros/deftime\n\n  (defmacro locals\n    \"Creates and returns a local environment map at the call site.\n  A local environment map is a map of keyword representing each local name\n  in the scope at that position, to the value that the local name is bound to.\"\n    [& names]\n    (->> (cond-> (macros/case :clj &env :cljs (:locals &env))\n           (seq names)\n           (select-keys (map (comp symbol name) names)))\n         (into {} (map (fn [[k _]] `[~(keyword k) ~(with-meta k nil)])))))\n\n  (defmacro dump\n    \"Saves a local environment map to the log entry corresponding to the specified\n  key.\n  If a transducer xform is specified, it will be applied when adding\n  the environment map to the log entry. Defaults to clojure.core/identity.\n  If session is specified, the environment map will be added to the log entry in\n  that session. Otherwise, the environment map will be added to the log entry in\n  the current session.\"\n    ([key] `(dump ~key identity))\n    ([key xform] `(dump (current-session) ~key ~xform))\n    ([session key xform]\n     `(spy> (locals) ~session ~key ~xform)))\n\n  )\n\n(defn make-logger\n  \"Creates a simple logger.\n\n  A simple logger is a function with two arities that closes over\n  an implicit session. If called with one argument, it acts like\n  `(spy>> :key <arg>)` on the implicit session. If called with\n  no argument, it acts like `(log-for :key)`.\n\n  If a transducer is passed as the optional argument, it will be attached\n  to the implicit session.\"\n  ([] (make-logger identity))\n  ([xform]\n   (let [sess (make-session)]\n     (fn\n       ([] (log-for sess :key))\n       ([val]\n        (spy>> sess :key xform val))))))\n\n(defn make-multi-logger\n  \"Creates a multi logger.\n  \n  A multi logger is a variant of the simple logger. If called with\n  two arguments, it acts like `(spy>> <arg1> <arg2>)` on the implicit\n  session. If called with one argument, it acts like (log-for <arg>)`.\n  If called with no argument, it acts like `(logs)`.\n\n  If a transducer is passed as the optional argument, it will be attached\n  to the implicit session.\"\n  ([] (make-multi-logger identity))\n  ([xform]\n   (let [sess (make-session)]\n     (fn\n       ([] (logs sess))\n       ([key] (log-for sess key))\n       ([key val]\n        (spy>> sess key xform val))))))\n"]}