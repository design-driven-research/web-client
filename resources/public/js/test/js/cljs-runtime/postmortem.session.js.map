{"version":3,"sources":["postmortem/session.cljc"],"mappings":"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","names":["var_args","G__47808","postmortem.session/xf->rf","js/Error","xform","postmortem.session.xf__GT_rf","cljs.core/conj","rf","finished?","cljs.core/volatile!","result","cljs.core/vreset!","acc","item","cljs.core/deref","ret","cljs.core/reduced?","cljs.core/unreduced","postmortem.session/enqueue!","logs","key","base-xform","temp__5751__auto__","map__47822","cljs.core/--destructure-map","cljs.core.get","items","entry","items'","fexpr__47823","cljs.core.assoc","cljs.core.comp","G__47824","G__47825","postmortem.session/complete-log-entry!","cljs.core.update","postmortem.session/complete-logs!","keys","cljs.core/reduce-kv","m","cljs.core/contains?","entry'","postmortem.session/collect-logs","cljs.core.reduce","k","cljs.core.assoc_BANG_","cljs.core/transient","cljs.core/persistent!","cljs.core/PROTOCOL_SENTINEL","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","postmortem.session/ThreadUnsafeSession","postmortem.session/->ThreadUnsafeSession","this","xform'","cljs.core/keys","cljs.core.apply","cljs.core/dissoc","cljs.core/set","postmortem.session/void-session","js/postmortem","js/postmortem.session","js/postmortem.session.t_postmortem$session47850","postmortem.session/t_postmortem$session47850","_47852","meta47851","postmortem.session/->t_postmortem$session47850"],"sourcesContent":["(ns postmortem.session\n  (:require [postmortem.protocols :as proto]\n            [postmortem.utils :refer [with-lock]])\n  #?(:clj (:import [java.util.concurrent.locks ReentrantLock])))\n\n(defn- xf->rf\n  ([xform] (xf->rf xform conj))\n  ([xform rf]\n   (let [rf (xform rf)\n         finished? (volatile! false)]\n     (fn\n       ([] (rf))\n       ([result]\n        (vreset! finished? true)\n        (rf result))\n       ([acc item]\n        (if @finished?\n          acc\n          (let [ret (rf acc item)]\n            (when (reduced? ret)\n              (vreset! finished? true))\n            (unreduced ret))))))))\n\n(defn- enqueue! [logs key base-xform xform item]\n  (if-let [{:keys [items] :as entry} (get logs key)]\n    (let [items' ((:fn entry) items item)]\n      (if (identical? items items')\n        logs\n        (assoc logs key (assoc entry :items items'))))\n    (let [rf (xf->rf (comp base-xform xform))\n          entry {:items (rf (rf) item) :fn rf :completed? false}]\n      (assoc logs key entry))))\n\n(defn- complete-log-entry! [entry]\n  (if (:completed? entry)\n    entry\n    (-> entry\n        (update :items (:fn entry))\n        (assoc :completed? true))))\n\n(defn- complete-logs! [logs keys]\n  (reduce-kv (fn [m key entry]\n               (if (contains? keys key)\n                 (let [entry' (complete-log-entry! entry)]\n                   (if (identical? entry entry')\n                     m\n                     (assoc m key entry')))\n                 m))\n             logs\n             logs))\n\n(defn- collect-logs [logs keys]\n  (->> keys\n       (reduce (fn [m k]\n                 (if-let [items (-> logs (get k) (get :items))]\n                   (assoc! m k items)\n                   m))\n               (transient {}))\n       persistent!))\n\n(deftype ThreadUnsafeSession [xform ^:volatile-mutable logs]\n  proto/ISession\n  proto/ILogStorage\n  (-add-item! [this key xform' item]\n    (set! logs (enqueue! logs key xform xform' item)))\n  (-keys [this]\n    (keys logs))\n  (-logs [this]\n    (collect-logs logs (keys logs)))\n  (-logs [this keys]\n    (collect-logs logs keys))\n  (-reset! [this]\n    (set! logs {}))\n  (-reset! [this keys]\n    (set! logs (apply dissoc logs keys)))\n  proto/ICompletable\n  (-completed? [this key]\n    (-> logs (get key) (get :completed?)))\n  (-complete! [this]\n    (set! logs (complete-logs! logs (set (keys logs)))))\n  (-complete! [this keys]\n    (set! logs (complete-logs! logs keys))))\n\n(defn void-session []\n  (reify\n    proto/ISession\n    proto/ILogStorage\n    (-add-item! [this key xform item])\n    (-keys [this])\n    (-logs [this] {})\n    (-logs [this keys] {})\n    (-reset! [this])\n    (-reset! [this keys])\n    proto/ICompletable\n    (-completed? [this key] true)\n    (-complete! [this])\n    (-complete! [this keys])))\n\n#?(:clj\n   (defn synchronized [session]\n     (let [^ReentrantLock lock (ReentrantLock.)]\n       (reify\n         proto/ISession\n         proto/ILogStorage\n         (-add-item! [this key xform' item]\n           (with-lock lock\n             (proto/-add-item! session key xform' item)))\n         (-keys [this]\n           (with-lock lock\n             (proto/-keys session)))\n         (-logs [this]\n           (with-lock lock\n             (proto/-logs session)))\n         (-logs [this keys]\n           (with-lock lock\n             (proto/-logs session keys)))\n         (-reset! [this]\n           (with-lock lock\n             (proto/-reset! session)))\n         (-reset! [this keys]\n           (with-lock lock\n             (proto/-reset! session keys)))\n         proto/ICompletable\n         (-completed? [this key]\n           (with-lock lock\n             (proto/-completed? session key)))\n         (-complete! [this]\n           (with-lock lock\n             (proto/-complete! session)))\n         (-complete! [this keys]\n           (with-lock lock\n             (proto/-complete! session keys)))))))\n"]}