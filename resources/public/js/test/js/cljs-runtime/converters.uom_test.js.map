{"version":3,"sources":["converters/uom_test.cljs"],"mappings":"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","names":["cljs.test/test-var","converters.uom-test/conversions","cljs.test.update_current_env_BANG_","cljs.core/conj","cljs.test/update-current-env!","cljs.core/rest","conversions","mapping","rdd.converters.uom/generate-conversions-lookup-table","values__10340__auto__","cljs.core/List","result__10341__auto__","cljs.core.apply","cljs.test/report","cljs.core/cons","t__10391__auto__","e53070","cljs.core/=","rdd.converters.uom/quantity-in-uom","e53071","e53072","e53073","value__10344__auto__","e53074"],"sourcesContent":["(ns converters.uom-test\n  (:require\n   [rdd.converters.uom :refer [quantity-in-uom generate-conversions-lookup-table]]\n   [clojure.test :as t :refer [deftest is testing]]))\n\n(deftest conversions\n  (testing \"Can convert a uom\"\n    (let [conversions #{{:from-uom-code \"kg\" :to-uom-code \"gr\" :quantity 1000}\n                        {:from-uom-code \"gr\" :to-uom-code \"gr\" :quantity 1}\n                        {:from-uom-code \"pallet\" :to-uom-code \"case\" :quantity 50}\n                        {:from-uom-code \"lb\" :to-uom-code \"gr\" :quantity 453.1}\n                        {:from-uom-code \"case\" :to-uom-code \"lb\" :quantity 25}}\n          mapping (generate-conversions-lookup-table conversions)]\n      (is (= (quantity-in-uom 5 \"case\" \"lb\" mapping)\n             {:quantity 5 :from \"case\" :to \"lb\" :factor 25 :total 125})\n          \"Should be able to convert directly related in mapping\")\n\n      (is (= (quantity-in-uom 5 \"lb\" \"case\" mapping)\n             {:quantity 5 :from \"lb\" :to \"case\" :factor 0.04 :total 0.2})\n          \"Should be able to convert in either direction\")\n\n      (is (= (quantity-in-uom 1000 \"kg\" \"case\" mapping)\n             {:quantity 1000 :from \"kg\" :to \"case\" :factor 0.08828073273008165 :total 88.28073273008165})\n          \"Should be able to convert distant conversions\")\n\n      (is (= (quantity-in-uom 1 \"kg\" \"kg\" mapping)\n             {:quantity 1 :from \"kg\" :to \"kg\" :factor 1 :total 1})\n          \"Should return no change when the same UOM\")\n\n      (is (:has-error? (quantity-in-uom 1 \"kg\" :invalid-uom mapping))\n          \"Should return an error when no path is found\"))))\n"]}