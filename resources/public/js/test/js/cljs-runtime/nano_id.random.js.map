{"version":3,"sources":["nano_id/random.cljc"],"mappings":";AAMA,AAAeA,+BAEJC;AAGX;;;8BAAA,9BAAMC,oEAEHC;AAFH,AAMW,IAAMC,OAAK,KAAAC,WAAgBF;AAA3B,AACE,AAAkBH,6CAAcI;;AAChC,OAACE,kDAAUF","names":["nano-id.random/secure-random","js/crypto","nano-id.random/random-bytes","size","seed","js/Uint8Array","cljs.core.array_seq"],"sourcesContent":["(ns nano-id.random\n  #?(:clj (:import nano_id.NanoID))\n  #?(:clj (:import java.util.Random)))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def ^:private secure-random\n  #?(:clj  NanoID/secureRandom\n     :cljs js/crypto))\n\n\n(defn random-bytes\n  \"Returns a random byte sequence of the specified size.\"\n  [size]\n  #?(:clj  (let [seed (byte-array size)]\n             (.nextBytes ^Random secure-random seed)\n             seed)\n     :cljs (let [seed (js/Uint8Array. size)]\n             (.getRandomValues secure-random seed)\n             (array-seq seed))))\n"]}