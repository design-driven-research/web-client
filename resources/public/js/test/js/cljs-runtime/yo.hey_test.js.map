{"version":3,"sources":["yo/hey_test.cljs"],"mappings":";AAKA,AAAA,0BAAA,1BAASC;AAAT,AAAA,OAAAD,mBAAA,AAASC;;yCAAT,zCAASA;AAAT,AACE,AAAA,AAAAC,wEAAA,mFAAA,sFAAAC,iEAAA;;AAAA,IAAA,AACE,kBAAA,+CAAA,2CAAA,uEAAA,KAAA,mEAAA,KAAA,8DAAA,cAAA,2CAAA,uEAAA,KAAA,mEAAA,KAAA,8DAAA,YAAA,2CAAA,uEAAA,SAAA,mEAAA,OAAA,8DAAA,aAAA,2CAAA,uEAAA,OAAA,mEAAA,KAAA,8DAAA,aAAA,2CAAA,uEAAA,KAAA,mEAAA,KAAA,8DAAA,12CAAMG;IAKAC,UAAQ,AAACC,qDAAkCF;AALjD,AAME,IAAA,AAAA,IAAAG,wBAAA,KAAAC,eAAA,iEAAA,KAAAA,eAAA,KAAA,2CAAA,8DAAA,IAAA,qDAAA,OAAA,gDAAA,KAAA,0DAAA,KAAA,uDAAA,cAAA,KAAA,IAAA,OAAA,IAAA,3cAAO,mCAAA,IAAA,OAAA,9CAACQ,mDAA8BX;IAAtCI,wBAAA,AAAAC,6DAAAH,fAAKQ;AAAL,AAAA,oBAAAN;AAAA,AAAAE,2BAAA,wCAAA,sDAAA,iEAAA,qDAAA,yDAAA,oDAAA,6DAAA,6DAAA,wDAAA,6DAAA,mBAAA,GAAA,qDAAA,GAAA,GAAA,AAAA,olBAAA,GAAA,AAAAC,eAAA,AAAA,oDAAAL,uBAAA;;AAAA,AAAAI,2BAAA,wCAAA,sDAAA,iEAAA,qDAAA,yDAAA,oDAAA,6DAAA,6DAAA,wDAAA,6DAAA,mBAAA,GAAA,qDAAA,GAAA,GAAA,AAAA,olBAAA,GAAA,KAAAH,eAAA,KAAA,AAAA,uDAAA,KAAAA,eAAA,KAAA,AAAAI,eAAA,AAAA,oDAAAL,uBAAA,KAAA,IAAA,OAAA,IAAA,OAAA;;;AAAAE;gBAAA,IAAAI,mBAAAC;AAAA,AAAA,OAAAH,2BAAA,wCAAA,sDAAA,iEAAA,qDAAA,yDAAA,oDAAA,6DAAA,6DAAA,wDAAA,6DAAA,mBAAA,GAAA,uDAAA,GAAA,GAAA,AAAA,olBAAA,GAAAE,iBAAA;WAPJ,AAAA,AAAAX,mCAAA,mFAAA,sFAAAC;;;AADF,CAAA,wCAAA,8DAAA,AAAA,6FAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,uEAAA,AAAA,wEAAA,AAAA,mBAAA,AAAA,GAAA,AAAA,EAAA,AAAA,EAAA,AAAA,EAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAJ,yBAAA,AAAA,AAAAA,uCAAA,9iCAASA","names":["cljs.test/test-var","yo.hey-test/conversions","cljs.test.update_current_env_BANG_","cljs.core/conj","cljs.test/update-current-env!","cljs.core/rest","conversions","mapping","rdd.converters.uom/generate-conversions-lookup-table","values__10340__auto__","cljs.core/List","result__10341__auto__","cljs.core.apply","cljs.test/report","cljs.core/cons","t__10391__auto__","e52719","cljs.core/=","rdd.converters.uom/quantity-in-uom"],"sourcesContent":["(ns yo.hey-test\n  (:require\n   [rdd.converters.uom :refer [quantity-in-uom generate-conversions-lookup-table]]\n   [clojure.test :refer [deftest is testing]]))\n\n(deftest conversions\n  (testing \"Can convert a uom\"\n    (let [conversions #{{:from-uom-code \"kg\" :to-uom-code \"gr\" :quantity 1000}\n                        {:from-uom-code \"gr\" :to-uom-code \"gr\" :quantity 1}\n                        {:from-uom-code \"pallet\" :to-uom-code \"case\" :quantity 50}\n                        {:from-uom-code \"lb\" :to-uom-code \"gr\" :quantity 453.1}\n                        {:from-uom-code \"case\" :to-uom-code \"lb\" :quantity 25}}\n          mapping (generate-conversions-lookup-table conversions)]\n      (is (= (quantity-in-uom 5 \"case\" \"lb\" mapping)\n             {:quantity 5 :from \"case\" :to \"lb\" :factor 25 :total 125})))))"]}