{"version":3,"sources":["rdd/db.cljs"],"mappings":"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","names":["rdd.db/item-schema","rdd.db/company-schema","rdd.db/role-schema","rdd.db/labor-schema","rdd.db/process-schema","rdd.db/company-item-schema","rdd.db/quote-schema","rdd.db/recipe-line-item-schema","rdd.db/uom-schema","rdd.db/measurement-schema","rdd.db/conversions-schema","rdd.db/composite-schema","rdd.db/schema","cljs.core.merge","rdd.db/enum-data","cljs.core/not","mount.core/running-noop?","js/rdd","js/rdd.db","js/rdd.db.conn","mount.core/->DerefableState","mount.core/mount-it","rdd.db/conn","mount.core/current-state","js/console.log","db-conn","cljs.core.atom","G__47570","datascript.core/empty-db","rdd.db/reset-db!","rdd.db/setup-listeners","rdd.db/db","cljs.core/deref","datascript.core/db","rdd.db/seed-db","db","datascript.core.transact_BANG_","conn","datascript.core.reset_conn_BANG_","G__47573","datascript.core.listen_BANG_","rdd.services.event-bus/publish!","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","rdd.db/transact-from-local!","p__47584","map__47585","cljs.core/--destructure-map","cljs.core.get","seq47577","self__4806__auto__","cljs.core/seq","tx-data","result","rdd.db/initial-data->db!","raw-data","data","rdd.db.transformers.tx-transforms/initial-remote->tx-data","cljs.core/tap>"],"sourcesContent":["(ns rdd.db\n  (:require-macros\n   [mount.core :refer [defstate]])\n  (:require [clojure.edn]\n            [datascript.core :as d]\n            [rdd.db.transformers.tx-transforms :refer [initial-remote->tx-data]]\n            [rdd.services.event-bus :as bus :refer [publish!]]))\n\n(defn item-schema\n  []\n  {:item/name {:db/unique :db.unique/identity}\n   :item/uuid {:db/unique :db.unique/identity}\n\n   :item/process {:db/valueType :db.type/ref\n                  :db/cardinality :db.cardinality/one}})\n\n(defn company-schema\n  []\n  {:company/uuid {:db/unique :db.unique/identity}\n   :company/name {:db/unique :db.unique/identity}\n   :company/company-items {:db/valueType :db.type/ref\n                           :db/cardinality :db.cardinality/many}})\n\n(defn role-schema\n  []\n  {:role/uuid {:db/unique :db.unique/identity}\n   :role/name {:db/unique :db.unique/identity}})\n\n(defn labor-schema\n  []\n  {:labor/uuid {:db/unique :db.unique/identity}\n   :labor/role {:db/valueType :db.type/ref\n                :db/cardinality :db.cardinality/one}})\n\n(defn process-schema\n  []\n  {:process/uuid {:db/unique :db.unique/identity}\n   :process/labor {:db/valueType :db.type/ref\n                   :db/cardinality :db.cardinality/many}})\n\n(defn company-item-schema\n  []\n  {:company-item/uuid {:db/unique :db.unique/identity}\n   :company-item/sku {:db/unique :db.unique/identity}\n   :company-item/item {:db/valueType :db.type/ref\n                       :db/cardinality :db.cardinality/one}\n   :company-item/quotes {:db/valueType :db.type/ref\n                         :db/cardinality :db.cardinality/many}})\n\n(defn quote-schema\n  []\n  {:quote/uuid {:db/unique :db.unique/identity}})\n\n(defn recipe-line-item-schema\n  []\n  {:recipe-line-item/uuid  {:db/unique :db.unique/identity}\n   :recipe-line-item/item {:db/valueType :db.type/ref\n                           :db/cardinality :db.cardinality/one}\n   :recipe-line-item/company-item {:db/valueType :db.type/ref\n                                   :db/cardinality :db.cardinality/one}})\n\n(defn uom-schema\n  []\n  {:uom/uuid  {:db/unique :db.unique/identity}\n   :uom/name {:db/unique :db.unique/identity}\n   :uom/code {:db/unique :db.unique/identity}\n   :uom/type {:db/valueType :db.type/ref}\n   :uom/system {:db/valueType :db.type/ref}\n   :uom/conversions {:db/valueType :db.type/ref\n                     :db/cardinality :db.cardinality/many}})\n\n(defn measurement-schema\n  []\n  {:measurement/uom {:db/valueType :db.type/ref}})\n\n(defn conversions-schema\n  []\n  {:conversion/uuid  {:db/unique :db.unique/identity}\n   :conversion/from {:db/valueType :db.type/ref\n                     :db/cardinality :db.cardinality/one}\n   :conversion/to {:db/valueType :db.type/ref\n                   :db/cardinality :db.cardinality/one}})\n\n(defn composite-schema\n  []\n  {:composite/contains  {:db/valueType :db.type/ref\n                         :db/cardinality :db.cardinality/many}})\n\n(defn schema\n  []\n  (merge\n   (uom-schema)\n   (role-schema)\n   (conversions-schema)\n   (item-schema)\n   (labor-schema)\n   (process-schema)\n   (recipe-line-item-schema)\n   (company-schema)\n   (company-item-schema)\n   (quote-schema)\n   (measurement-schema)\n   (composite-schema)\n\n   {:schema/version {:version \"0.0.1\" :doc \"Main schema\"}}))\n\n;; =========================================================================\n;; =========================================================================\n;; SEED DATA\n;; =========================================================================\n;; =========================================================================\n(defn enum-data\n  \"System of units data prepped as datoms for insert\"\n  []\n  [{:db/ident :production.type/ATOM}\n   {:db/ident :production.type/COMPOSITE}\n\n   {:db/ident :units.system/IMPERIAL}\n   {:db/ident :units.system/METRIC}\n\n   {:db/ident :units.system/CUSTOM}\n\n   {:db/ident :units.type/WEIGHT}\n   {:db/ident :units.type/VOLUME}\n   {:db/ident :units.type/CUSTOM}\n\n   {:db/ident :time.interval/SECOND}\n   {:db/ident :time.interval/MINUTE}\n   {:db/ident :time.interval/HOUR}])\n\n(declare reset-db! seed-db setup-listeners)\n\n(defstate ^{:on-reload :noop} conn\n  :start (do\n           (js/console.log \"Recreating dsdb\")\n           (let [db-conn (atom (d/empty-db (schema))\n                               :meta {:listeners (atom {})})]\n             (reset-db! db-conn)\n             (setup-listeners db-conn)\n             db-conn)))\n\n(defn db\n  \"A snapshot of the current db\"\n  []\n  (d/db @conn))\n\n(defn seed-db\n  \"Seed the db with data\"\n  [db]\n  (d/transact! db (enum-data)))\n\n(defn reset-db!\n  [conn]\n  (d/reset-conn! conn (d/empty-db (schema)))\n  (seed-db conn))\n\n(defn setup-listeners\n  [conn]\n  (d/listen! conn :default (fn [db]\n                             (publish! {:topic :db-updated\n                                        :data db}))))\n\n(defn transact-from-local!\n  [& {:keys [tx-data\n             db-conn]\n      :or {db-conn @conn}}]\n  (let [result (d/transact! db-conn tx-data)]\n    (publish! {:topic :local-transaction-update\n               :data tx-data})\n    result))\n\n\n(defn initial-data->db!\n  \"Push an initial data load into the db\"\n  [raw-data]\n  (let [data (-> raw-data :result :data)\n        tx-data (initial-remote->tx-data data)]\n    (tap> {:tx-data tx-data})\n    (d/transact! @conn tx-data)\n    (publish! {:topic :remote-db-loaded})))\n\n(comment\n\n  (tap> (d/datoms (d/db @conn) :avet))\n  (tap> (d/datoms (d/db @conn) :eavt))\n\n  ;; \n  )\n"]}