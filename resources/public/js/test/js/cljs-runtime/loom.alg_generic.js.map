{"version":3,"sources":["loom/alg_generic.cljc"],"mappings":"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","names":["loom.alg-generic/trace-path","preds","node","cljs.core.take_while","cljs.core/identity","cljs.core/iterate","loom.alg-generic/paths","path","this-node","cljs.core/peek","p1__41453#","cljs.core.filter","cljs.core/not-any?","edge","cljs.core._EQ_","cljs.core.partition","p1__41454#","cljs.core.mapcat","G__41458","G__41460","cljs.core.conj","cljs.core/cons","loom.alg-generic/trace-paths","start","p1__41472#","cljs.core.remove","G__41473","loom.alg-generic/preds->span","cljs.core.reduce","p__41474","vec__41475","cljs.core.nth","span","n","p","cljs.core.assoc","G__41478","G__41479","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","loom.alg-generic/pre-traverse","p__41483","map__41484","cljs.core/--destructure-map","cljs.core.get","seq41480","G__41481","cljs.core/first","cljs.core/next","G__41482","self__4805__auto__","successors","seen","stack","temp__5753__auto__","cljs.core/contains?","step","cljs.core/pop","nbrs","cljs.core/LazySeq","cljs.core.into","loom.alg-generic/pre-edge-traverse","p__41488","map__41489","seq41485","G__41486","G__41487","nbrstack","temp__5751__auto__","nbr","parent","loom.alg-generic/pre-span","p__41493","map__41494","seq41490","G__41491","G__41492","return-seen","cljs.core/empty?","v","u","loom.alg-generic/post-traverse","p__41498","map__41499","seq41495","G__41496","G__41497","result","loom.alg-generic/post-edge-traverse","p__41503","map__41504","seq41500","G__41501","G__41502","edges","G__41506","loom.alg-generic/topsort-component","js/Error","loom.alg_generic.topsort_component","explored","us","cljs.core/seq","cljs.core/some","loom.alg-generic/bf-traverse","p__41514","map__41515","seq41511","G__41512","G__41513","f","when","or__4212__auto__","d","nbr-pred","cljs.core/constantly","queue","vec__41526","depth","p1__41507#","p1__41508#","G__41529","G__41530","G__41531","iter__4611__auto__","s__41533","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__41535","cljs.core/chunk-buffer","i__41534","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__41532","cljs.core/chunk-rest","cljs.core/rest","p1__41509#","p2__41510#","cljs.core/PersistentQueue","cljs.core/map?","s__41537","b__41539","i__41538","iter__41536","s","loom.alg-generic/bf-span","p__41543","map__41544","seq41540","G__41541","G__41542","cljs.core/last","loom.alg_generic.bf_traverse","_","pm","loom.alg-generic/bf-path","p__41549","map__41550","seq41545","G__41546","G__41547","G__41548","end","opts","cljs.core.merge","cljs.core/vector","p__41551","vec__41552","cljs.core.apply","cljs.core/concat","cljs.core/reverse","loom.alg-generic/shared-keys","m1","m2","cljs.core.partial","cljs.core/keys","loom.alg-generic/bf-path-bi","outgoing","predecessors","loom.alg-generic/reverse-edges","successor-fn","nodes","coll","s__41557","xs__6308__auto__","iterys__4607__auto__","s__41559","b__41561","i__41560","iter__41558","fs__4608__auto__","cljs.core.concat","iter__41556","loom.alg-generic/conj-paths","from-map","to-map","matches","s__41563","s__41565","s__41567","b__41569","i__41568","iter__41566","iter__41564","iter__41562","from","cljs.core.map","to","cljs.core/vec","loom.alg-generic/bf-paths-bi","find-succs","find-preds","overlaps","q","p1__41570#","map-set-pairs","map","pairs","cljs.core/persistent!","p__41571","vec__41572","key","val","cljs.core.assoc_BANG_","cljs.core/transient","incoming","q1","cljs.core/List","q2","all","cljs.core/set","G__41578","loom.alg-generic/dijkstra-traverse","dist","loom.alg_generic.dijkstra_traverse","p__41590","vec__41591","state","pq","vec__41594","dist-su","fpq","p__41597","vec__41598","dist-suv","dist-sv","and__4210__auto__","cljs.core.disj","cljs.core/hash","cljs.core.sorted_set","loom.alg-generic/dijkstra-span","p__41601","vec__41602","vec__41605","cljs.core/assoc-in","cljs.core/second","loom.alg-generic/dijkstra-path-dist","vec__41612","end-state","p__41608","vec__41609","cljs.core.comp","loom.alg-generic/dijkstra-path","loom.alg-generic/bits-per-long","cljs.core/long","loom.alg-generic/bm-longs","bits","Math/ceil","loom.alg-generic/bm-new","cljs.core.long_array","loom.alg-generic/bm-copy","bm","size","loom.alg-generic/bm-set","bitmap","idx","x__4295__auto__","y__4296__auto__","new-bitmap","chunk","cljs.core/quot","offset","cljs.core/mod","mask","value","new-value","loom.alg-generic/bm-get","masked-value","loom.alg-generic/bm-or","seq41638","self__4806__auto__","bitmaps","cljs.core/max","seq__41651","chunk__41658","count__41659","i__41660","seq__41661","chunk__41663","count__41664","i__41665","vec__41722","c__4638__auto__","cljs.core/chunk-first","vec__41725","seq__41652","chunk__41654","count__41655","i__41656","vec__41734","vec__41738","cljs.core.map_indexed","cljs.core/list","loom.alg-generic/bm-get-indicies","s__41763","s__41765","b__41767","i__41766","iter__41764","iter__41762","cljs.core.range","this__4461__auto__","k__4462__auto__","this__4463__auto__","k41796","else__4464__auto__","G__41869","cljs.core/Keyword","node->idx","idx->node","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","ret__4484__auto__","p__41877","vec__41881","k__4485__auto__","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","cljs.core/PersistentVector","G__41795","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this41797","other41798","this__4471__auto__","k__4472__auto__","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__4468__auto__","G__41933","this__4469__auto__","k__4470__auto__","pred__41938","cljs.core/keyword-identical?","expr__41939","this__4474__auto__","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-conj","loom.alg-generic/Ancestry","this__4505__auto__","writer__4506__auto__","cljs.core/-write","G__41837","extmap__4501__auto__","G__41954","cljs.core/record?","loom.alg-generic/->Ancestry","loom.alg-generic/map->Ancestry","loom.alg-generic/ancestry-new","loom.alg-generic/ancestry-contains?","ancestry","loom.alg-generic/ancestry-add","seq41978","G__41979","G__41980","parents","map__41993","nid","pidxs","loom.alg-generic/ancestor?","childer","parenter","map__42006","cidx","pidx","cljs.core/boolean","loom.alg-generic/ancestors","child","map__42009","loom.alg-generic/ancestry-nodes"],"sourcesContent":["(ns ^{:doc \"Graph algorithms for use on any type of graph\"\n      :author \"Justin Kramer\"}\n  loom.alg-generic\n  (:refer-clojure :exclude [ancestors]))\n\n#?(:clj (do (set! *warn-on-reflection* true)\n            ;(set! *unchecked-math* :warn-on-boxed)\n            ))\n\n;;;\n;;; Utility functions\n;;;\n\n(defn trace-path\n  \"Using a map of nodes-to-preds, traces a node's family tree back to the\n  source. Cycles are not accounted for.\"\n  [preds node]\n  (take-while identity (iterate preds node)))\n\n(defn paths\n  \"Returns a lazy seq of all non-looping path vectors starting with\n  [<start-node>]\"\n  [preds path]\n  (let [this-node (peek path)]\n    (->> (preds this-node)\n         (filter #(not-any? (fn [edge] (= edge [this-node %]))\n                            (partition 2 1 path)))\n         (mapcat #(paths preds (conj path %)))\n         (cons path))))\n\n(defn trace-paths\n  \"Given a function and a starting node, returns all possible paths\n  back to source. Cycles are not accounted for.\"\n  [preds start]\n  (remove #(preds (peek %)) (paths preds [start])))\n\n(defn preds->span\n  \"Converts a map of the form {node predecessor} to a spanning tree of the\n  form {node [successors]}\"\n  [preds]\n  (reduce\n   (fn [span [n p]]\n     (if p\n       (assoc span p (conj (span p []) n))\n       span))\n   {} preds))\n\n;;;\n;;; Depth-first traversal\n;;;\n\n(defn pre-traverse\n  \"Traverses a graph depth-first preorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  lazy seq of nodes.\"\n  [successors start & {:keys [seen] :or {seen #{}}}]\n  (letfn [(step [stack seen]\n            (when-let [node (peek stack)]\n              (if (contains? seen node)\n                (step (pop stack) seen)\n                (let [seen (conj seen node)\n                      nbrs (remove seen (successors node))]\n                  (lazy-seq\n                    (cons node\n                          (step (into (pop stack) nbrs)\n                                seen)))))))]\n    (step [start] seen)))\n\n(defn pre-edge-traverse\n  \"Traverses a graph depth-first preorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  lazy seq of edges, each edge being a vector [source-node dest-node].\n  Note that for undirected graphs each edge will be returned twice,\n  once for each direction.\"\n  [successors start & {:keys [seen] :or {seen #{}}}]\n  (letfn [(step [successors start nbrs stack nbrstack seen]\n    (if-let [nbr (first nbrs)]\n      (cons\n        [start nbr]\n        (lazy-seq\n          (let [seen (conj seen start)]\n            (if (seen nbr)\n              (step successors start (next nbrs) stack nbrstack seen)\n              (step successors nbr (successors nbr)\n                    (conj stack start) (conj nbrstack (next nbrs))\n                    seen)))))\n      (when-let [parent (peek stack)]\n        (recur successors parent (peek nbrstack)\n               (pop stack) (pop nbrstack) (conj seen start)))))]\n    (when-not (seen start)\n      (step successors start (successors start) [] [] (conj seen start)))))\n\n;; TODO: graph-seq, analog of tree-seq\n\n(defn pre-span\n  \"Returns a depth-first spanning tree of the form {node [successors]}\"\n  [successors start & {:keys [seen return-seen] :or {seen #{}}}]\n  (loop [seen seen\n         preds {start nil}\n         stack [start]]\n    (if (empty? stack)\n      ;; TODO: this is awkward, devise something better\n      (if return-seen\n        [(preds->span preds) seen]\n        (preds->span preds))\n      (let [v (peek stack)\n            seen (conj seen v)]\n        (if-let [u (first (remove seen (successors v)))]\n          (recur seen (assoc preds u v) (conj stack u))\n          (recur seen preds (pop stack)))))))\n\n(defn post-traverse\n  \"Traverses a graph depth-first postorder from start, successors\n  being a function that returns adjacent nodes. Returns a vector\"\n  [successors start & {:keys [seen return-seen] :or {seen #{}}}]\n  ;; For most graphs, being lazy wouldn't matter\n  (loop [seen seen\n         result []\n         stack [start]]\n    (if (empty? stack)\n      (if return-seen\n        [result seen]\n        result)\n      (let [v (peek stack)\n            seen (conj seen v)\n            nbrs (remove seen (successors v))]\n        (if (empty? nbrs)\n          (recur seen (conj result v) (pop stack))\n          (recur seen result (conj stack (first nbrs))))))))\n\n(defn post-edge-traverse\n  \"Traverses a graph depth-first postorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  seq of edges, each edge being a vector [source-node dest-node].\n  Note that for undirected graphs each edge will be returned twice,\n  once for each direction.\"\n  [successors start & {:keys [seen return-seen] :or {seen #{}}}]\n  (if (seen start)\n    (when return-seen\n      [nil seen])\n    (loop [start start\n          nbrs (successors start)\n          stack []\n          nbrstack []\n          seen seen\n          edges ()]\n      (let [seen (conj seen start)]\n        (if-let [nbr (first nbrs)]\n          (if (seen nbr)\n            (recur start (next nbrs) stack nbrstack seen (conj edges [start nbr]))\n            (recur nbr (successors nbr)\n                   (conj stack start) (conj nbrstack (next nbrs))\n                   seen (conj edges [start nbr])))\n          (if-let [parent (peek stack)]\n            (recur parent (peek nbrstack)\n                   (pop stack) (pop nbrstack) seen edges)\n            (if return-seen\n              [edges seen]\n              edges)))))))\n\n(defn topsort-component\n  \"Topological sort of a component of a (presumably) directed graph.\n  Returns nil if the graph contains any cycles. See loom.alg/topsort\n  for a complete topological sort\"\n  ([successors start]\n     (topsort-component successors start #{} #{}))\n  ([successors start seen explored]\n     (loop [seen seen\n            explored explored\n            result ()\n            stack [start]]\n       (if (empty? stack)\n         result\n         (let [v (peek stack)\n               seen (conj seen v)\n               us (remove explored (successors v))]\n           (if (seq us)\n             (when-not (some seen us)\n               (recur seen explored result (conj stack (first us))))\n             (recur seen (conj explored v) (conj result v) (pop stack))))))))\n\n;;;\n;;; Breadth-first traversal\n;;;\n\n(defn bf-traverse\n  \"Traverses a graph breadth-first from start, successors being a\n  function that returns adjacent nodes. When :f is provided, returns a\n  lazy seq of (f node predecessor-map depth) for each node traversed.\n  Otherwise, returns a lazy seq of the nodes. When :when is provided,\n  filters successors with (f neighbor predecessor depth).\"\n  [successors start & {:keys [f when seen]}]\n  (let [f (or f (fn [n p d] n))\n        nbr-pred (or when (constantly true))]\n    (letfn [(step [queue preds]\n              (when-let [[node depth] (peek queue)]\n                (cons\n                 (f node preds depth)\n                 (lazy-seq\n                  (let [nbrs (->> (successors node)\n                                  (remove #(contains? preds %))\n                                  (filter #(nbr-pred % node (inc depth))))]\n                    (step (into (pop queue) (for [nbr nbrs] [nbr (inc depth)]))\n                          (reduce #(assoc %1 %2 node) preds nbrs)))))))]\n      (step (conj #?(:clj clojure.lang.PersistentQueue/EMPTY\n                     :cljs cljs.core/PersistentQueue.EMPTY)\n                  [start 0])\n            (if (map? seen)\n              (assoc seen start nil)\n              (into {start nil} (for [s seen] [s nil])))))))\n\n(defn bf-span\n  \"Return a breadth-first spanning tree of the form {node\n  [successors]}\"\n  [successors start & {:keys [seen]}]\n  (preds->span\n   (last\n    (bf-traverse successors start\n                 :f (fn [_ pm _] pm)\n                 :seen seen))))\n\n(defn bf-path\n  \"Returns a path from start to end with the fewest hops (i.e. irrespective\n  of edge weights), successors being a function that returns adjacent nodes\"\n  [successors start end & {:as opts}]\n  (let [opts (merge opts {:f vector})]\n    (when-let [preds (some\n                      (fn [[_ pm _]] (when (pm end) pm))\n                      (apply bf-traverse successors start (apply concat opts)))]\n      (reverse (trace-path preds end)))))\n\n(defn- shared-keys\n  \"Returns a lazy-seq of the keys that exist in both m1 and m2\"\n  [m1 m2]\n  (if (< (count m2) (count m1))\n    (recur m2 m1)\n    (filter (partial contains? m2) (keys m1))))\n\n#?(:cljs\n   (defn bf-path-bi [outgoing predecessors start end]\n     (throw (js/Error. \"Unsupported operation `bf-path-bi`\")))\n   :clj\n   (defn bf-path-bi\n     \"Using a bidirectional breadth-first search, finds a path from start\n  to end with the fewest hops (i.e. irrespective of edge weights),\n  outgoing and predecessors being functions which return adjacent\n  nodes. Can be much faster than a unidirectional search on certain\n  types of graphs\"\n     [outgoing predecessors start end]\n     (let [done? (atom false)\n           preds1 (atom {})             ;from start to end\n           preds2 (atom {})             ;from end to start\n           search (fn [nbrs n preds]\n                    (dorun\n                     (take-while\n                      (fn [_] (not @done?))\n                      (bf-traverse\n                       nbrs n :f (fn [_ pm _] (reset! preds pm))))))\n           search1 (future (search outgoing start preds1))\n           search2 (future (search predecessors end preds2))\n           ;; TODO: watchers?\n           find-intersects #(shared-keys @preds1 @preds2)]\n       (loop [intersects (find-intersects)]\n         (if (or (seq intersects) (future-done? search1) (future-done? search2))\n           (do\n             (reset! done? true)\n             (cond\n               (seq intersects)\n               (let [intersect (apply min-key\n                                      #(+ (count (trace-path @preds1 %))\n                                          (count (trace-path @preds2 %)))\n                                      intersects)]\n                 (concat\n                  (reverse (trace-path @preds1 intersect))\n                  (rest (trace-path @preds2 intersect))))\n               (@preds1 end) (reverse (trace-path @preds1 end))\n               (@preds2 start) (trace-path @preds2 start)))\n           (recur (find-intersects)))))))\n\n(defn- reverse-edges [successor-fn nodes coll]\n  (for [node nodes\n        nbr (successor-fn node)\n        :when (not (contains? coll nbr))]\n    [nbr node]))\n\n(defn- conj-paths [from-map to-map matches]\n  (for [n matches\n        from (map reverse (trace-paths from-map n))\n        to (map rest (trace-paths to-map n))]\n    (vec (concat from to))))\n\n(defn bf-paths-bi\n  \"Using a bidirectional breadth-first search, returns all shortest\n  paths from start to end; predecessors is called on end and each\n  preceding node, successors is called on start, etc.\"\n  [successors predecessors start end]\n  (let [find-succs (partial reverse-edges successors)\n        find-preds (partial reverse-edges predecessors)\n        overlaps (fn [coll q] (seq (filter #(contains? coll %) q)))\n        map-set-pairs (fn [map pairs]\n                        (persistent! (reduce (fn [map [key val]]\n                                  (assoc! map key (conj (get map key #{}) val)))\n                                (transient map) pairs)))]\n    (loop [outgoing {start nil}\n           incoming {end nil}\n           q1 (list start)\n           q2 (list end)]\n      (when (and (seq q1) (seq q2))\n        (if (<= (count q1) (count q2))\n          (let [pairs (find-succs q1 outgoing)\n                outgoing (map-set-pairs outgoing pairs)\n                q1 (map first pairs)]\n            (if-let [all (overlaps incoming q1)]\n              (conj-paths outgoing incoming (set all))\n              (recur outgoing incoming q1 q2)))\n          (let [pairs (find-preds q2 incoming)\n                incoming (map-set-pairs incoming pairs)\n                q2 (map first pairs)]\n            (if-let [all (overlaps outgoing q2)]\n              (conj-paths outgoing incoming (set all))\n              (recur outgoing incoming q1 q2))))))))\n\n;; FIXME: Decide whether this can be optimized and is worth keeping\n#_(defn bf-path-bi2\n    \"Non-threaded version of bf-path-bi. Tends to be slower.\"\n    [outgoing predecessors start end]\n    (loop [preds {start nil}\n           succs {end nil}\n           q1 [start]\n           q2 [end]]\n      (when (and (seq q1) (seq q2))\n        (if (<= (count q1) (count q2))\n          (let [pairs (for [node q1 nbr (outgoing node)\n                            :when (not (contains? preds nbr))]\n                        [nbr node])\n                preds (into preds pairs)\n                q1 (map first pairs)]\n            (if-let [i (some #(when (contains? succs %) %) q1)]\n              (concat\n               (reverse (trace-path preds i))\n               (rest (trace-path succs i)))\n              (recur preds succs q1 q2)))\n          (let [pairs (for [node q2 nbr (predecessors node)\n                            :when (not (contains? succs nbr))]\n                        [nbr node])\n                succs (into succs pairs)\n                q2 (map first pairs)]\n            (if-let [i (some #(when (contains? preds %) %) q2)]\n              (concat\n               (reverse (trace-path preds i))\n               (rest (trace-path succs i)))\n              (recur preds succs q1 q2)))))))\n\n;;;\n;;; Dijkstra\n;;;\n\n(defn dijkstra-traverse\n  \"Returns a lazy-seq of [current-node state] where state is a map in the\n  format {node [distance predecessor]}. When f is provided, returns\n  a lazy-seq of (f node state) for each node\"\n  ([successors dist start]\n     (dijkstra-traverse successors dist start vector))\n  ([successors dist start f]\n     (letfn [(step [[state pq]]\n               (when-let [[dist-su _ u :as fpq] (first pq)]\n                 (cons\n                  (f u state)\n                  (lazy-seq\n                   (step\n                    (reduce\n                     (fn [[state pq] v]\n                       (let [dist-suv (+ dist-su (dist u v))\n                             dist-sv (first (state v))]\n                         (if (and dist-sv (>= dist-suv dist-sv))\n                           [state pq]\n                           (let [pq (if dist-sv\n                                      (disj pq [dist-sv (hash v) v])\n                                      pq)]\n                             [(assoc state v [dist-suv u])\n                              (conj pq [dist-suv (hash v) v])]))))\n                     [state (disj pq fpq)]\n                     (successors u)))))))]\n       (step [{start [0 nil]}\n              ;; Poor man's priority queue. Caveats:\n              ;; 1) Have to keep it in sync with current state\n              ;; 2) Have to include hash codes for non-Comparable items\n              ;; 3) O(logn) operations\n              ;; Tried clojure.contrib.priority-map but it wasn't any faster\n              (sorted-set [0 (hash start) start])]))))\n\n(defn dijkstra-span\n  \"Finds all shortest distances from start, where successors and dist\n  are functions called as (successors node) and (dist node1 node2).\n  Returns a map in the format {node {successor distance}}\"\n  [successors dist start]\n  (reduce\n   (fn [span [n [d p]]]\n     (if p\n       (assoc-in span [p n] d)\n       span))\n   {}\n   (second (last (dijkstra-traverse successors dist start)))))\n\n(defn dijkstra-path-dist\n  \"Finds the shortest path from start to end, where successors and dist\n  are functions called as (successors node) and (dist node1 node2).\n  Returns a vector: [path distance]\"\n  [successors dist start end]\n  (if-let [[_ end-state] (first (filter\n                                 (fn [[node _]] (= end node))\n                                 (dijkstra-traverse successors dist start)))]\n    [(reverse (trace-path (comp second end-state) end))\n     (first (end-state end))]))\n\n(defn dijkstra-path\n  \"Finds the shortest path from start to end, where successors and dist\n  are functions called as (successors node) and (dist node1 node2)\"\n  [successors dist start end]\n  (first (dijkstra-path-dist successors dist start end)))\n\n;; FIXME: Research proper way to do this\n#_(defn dijkstra-path-dist-bi\n    \"Finds a path -- not necessarily the shortest -- from start to end\n  birectionally, where successors and dist are functions called as\n  (successors node) and (dist node1 node2). Returns a vector: [path distance]\"\n    [successors dist start end]\n    ;; TODO: make this work better with directed graphs (predecessors fn)\n    (let [done? (atom false)\n          processed1 (atom #{})\n          processed2 (atom #{})\n          state1 (atom nil)\n          state2 (atom nil)\n          find-intersect (fn [] (some #(when (@processed1 %) %) @processed2))\n          search (fn [n processed state]\n                   (dorun\n                    (take-while\n                     (fn [_] (not @done?))\n                     (dijkstra-traverse successors dist n\n                                        #(do\n                                           (swap! processed conj %1)\n                                           (reset! state %2))))))\n          search1 (future (search start processed1 state1))\n          search2 (future (search end processed2 state2))]\n      (loop [intersect (find-intersect)]\n        (if (or intersect (future-done? search1))\n          (do\n            (prn intersect)\n            (reset! done? true)\n            (cond\n             intersect [(concat\n                         (reverse (trace-path (comp second @state1) intersect))\n                         (rest (trace-path (comp second @state2) intersect)))\n                        (+ (first (@state1 intersect))\n                           (first (@state2 intersect)))]\n             (@state1 end) [(reverse (trace-path (comp second @state1) end))\n                            (first (@state1 end))]\n             (@state2 start) [(trace-path (comp second @state2) start)\n                              (first (@state2 start))]))\n\n          (recur (find-intersect))))))\n\n;;;\n;;; Node-bitmap based fast DAG ancestry cache implementation\n;;;\n\n;;; Ancestry node-bitmap helper vars/fns\n\n(def bits-per-long (long #?(:clj 64 :cljs 32)))\n\n(defn bm-longs\n  \"Returns the number of longs required to store bits count bits in a bitmap.\"\n  [bits]\n  (long (Math/ceil (/ bits bits-per-long))))\n\n(defn bm-new\n  \"Create new empty bitmap.\"\n  ^longs []\n  (long-array 1))\n\n(defn- bm-copy ^longs [bm size]\n  #?(:clj (java.util.Arrays/copyOf ^longs bm ^Long size)\n     :cljs (.slice bm 0 size)))\n\n(defn bm-set\n  \"Set boolean state of bit in 'bitmap at 'idx to true.\"\n  ^longs [^longs bitmap idx]\n  (let [size (max (count bitmap) (bm-longs (inc idx)))\n        new-bitmap (bm-copy bitmap size) \n        chunk (quot idx bits-per-long)\n        offset (mod idx bits-per-long)\n        mask (bit-set 0 offset)\n        value (aget new-bitmap chunk)\n        new-value (bit-or value ^Long mask)]\n    (aset new-bitmap chunk new-value)\n    new-bitmap))\n\n(defn bm-get\n  \"Get boolean state of bit in 'bitmap at 'idx.\"\n  [^longs bitmap idx]\n  (when (<= (bm-longs (inc idx)) (count bitmap))\n    (let [chunk (quot idx bits-per-long)\n          offset (mod idx bits-per-long)\n          mask (bit-set 0 offset)\n          value (aget bitmap chunk)\n          masked-value (bit-and value mask)]\n      (not (zero? masked-value)))))\n\n(defn bm-or\n  \"Logically OR 'bitmaps together.\"\n  ^longs [& bitmaps]\n  (if (empty? bitmaps)\n    (bm-new)\n    (let [size (apply max (map count bitmaps))\n          new-bitmap (bm-copy (first bitmaps) size)]\n      (doseq [bitmap (rest bitmaps)\n              [idx value] (map-indexed list bitmap)\n              :let [masked-value (bit-or value (aget new-bitmap idx))]]\n        (aset new-bitmap idx masked-value))\n      new-bitmap)))\n\n(defn bm-get-indicies\n  \"Get the indicies of set bits in 'bitmap.\"\n  [^longs bitmap]\n  (for [chunk (range (count bitmap))\n        offset (range bits-per-long)\n        :let [idx (+ (* chunk bits-per-long) offset)]\n        :when (bm-get bitmap idx)]\n    idx))\n\n;;; Ancestry public API\n\n(defrecord Ancestry [node->idx idx->node bitmaps])\n\n(defn ancestry-new\n  \"Create a new, empty Ancestry cache.\"\n  []\n  (->Ancestry {} {} []))\n\n(defn ancestry-contains?\n  \"Finds if a 'node is contained in the 'ancestry cache.\"\n  [ancestry node]\n  (-> ancestry :node->idx (contains? node)))\n\n(defn ancestry-add\n  \"Adds a 'node and its 'parents associations to the 'ancestry cache.\"\n  [ancestry node & parents]\n  (if (ancestry-contains? ancestry node)\n    ;; TODO Should we throw instead of drop?\n    ancestry\n    (let [{:keys [node->idx idx->node bitmaps]} ancestry\n          nid (count node->idx)\n          node->idx (assoc node->idx node nid)\n          idx->node (assoc idx->node nid node)\n          pidxs (map node->idx parents)\n          new-bitmap (if (empty? pidxs)\n                       (bm-new)\n                       (apply bm-or (map bitmaps pidxs)))\n          new-bitmap (reduce bm-set new-bitmap pidxs)\n          bitmaps (conj bitmaps new-bitmap)]\n      (->Ancestry node->idx idx->node bitmaps))))\n\n(defn ancestor?\n  \"Finds if the 'parenter node is an ancestor of 'childer node for the given\n  'ancestry cache.\"\n  [ancestry childer parenter]\n  (let [{:keys [node->idx bitmaps]} ancestry\n        cidx (node->idx childer)\n        pidx (node->idx parenter)]\n    (boolean\n     (when (and cidx pidx)\n       (bm-get (get bitmaps cidx)\n               pidx)))))\n\n(defn ancestors\n  \"Returns all of the ancestors of 'child node.\"\n  [ancestry child]\n  (let [{:keys [node->idx idx->node bitmaps]} ancestry\n        cidx (node->idx child)]\n    (->> (get bitmaps cidx)\n         bm-get-indicies\n         (map idx->node))))\n\n(defn ancestry-nodes\n  \"Returns all of the nodes in an 'ancestry.\"\n  [ancestry]\n  (-> ancestry :node->idx keys))\n"]}